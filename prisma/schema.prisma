generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  ships     Ship[]
  
  @@map("users")
}

model Ship {
  id        String   @id @default(uuid())
  name      String
  capacity  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  voyages   Voyage[]
  fuelLogs  FuelLog[]
  maintenanceRecords  MaintenanceRecord[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("ships")
}

model Voyage {
  id        String   @id @default(uuid())
  name      String

  // voyage details
  origin    String
  destination String
  distance   Float // distance in kilometers o to d
  departureDate DateTime
  cargoWeight        Float
  cargoType          String?

  // weather conditions
  weatherSeverity    Float
  windSpeed          Float

  // ai predictions
  predictedFuelUsage      Float?
  predictedDuration  Float?
  optimalSpeed       Float?
  speedSchedule       Json?
  arrivalTime DateTime

  fuelLogs          FuelLog[]

  // actual data and feedback here
  feedbacks          VoyageFeedback[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  shipId            String
  ship              Ship     @relation(fields: [shipId], references: [id])
  @@map("voyages")
}

model VoyageFeedback {
  id        String   @id @default(uuid())
  voyageId  String

  //same as the Voyage model
  actualFuelUsage         Float? // per the voyage
  actualDuration     Int? // per voyage

  //deviations and score for continuous learning purposes

  fuelAccuracy       Float? // in percentage per voyage
  durationAccuracy   Float? // in percentage per voyage
  routeOptimizationScore Int? // score for route optimization

  voyage    Voyage   @relation(fields: [voyageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("voyage_feedback")
}

model FuelLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())

  fuelType  String   // "diesel", "petrol"
  fuelUsage  Float    // total is actualFuelUsage in voyagefeedback
  fuelCost      Float    // INR fuelType* cost per liter [ petrol => 105/litre, diesel => 90/litre ]

  shipId    String
  ship      Ship     @relation(fields: [shipId], references: [id])
  createdAt DateTime @default(now())
  voyageId  String
  voyage    Voyage?  @relation(fields: [voyageId], references: [id])
  updatedAt DateTime @updatedAt
  @@map("fuel_logs")
}

model MaintenanceRecord {
  id            String   @id @default(uuid())

  //whenever i use the hit the get req /maintenance-alert/:shipId ig lol
  maintainedAt  DateTime @default(now())

  //everything ai model generated
  description   String?
  nextDue       DateTime? // next maintenance date (6 - 12 months after maintainedAt)
  voyageReadyDate DateTime? // after maintenance (usually after 10 - 15 days)
  score          Int       // 1-5 [more the score better the ship]
  shipId       String
  ship         Ship     @relation(fields: [shipId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("maintenance_records")
}
model AIModel {
  id          String   @id @default(uuid())
  modelType   String   // "route_optimizer", "fuel_predictor", "maintenance_forecaster"
  version     String
  parameters  Json // store model weights/hyperparameters
  accuracy    Float? 
  trainedAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("ai_models")
}